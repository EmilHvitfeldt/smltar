run_dir,eval_,metric_loss,metric_accuracy,metric_val_loss,metric_val_accuracy,flag_kernel_size1,flag_strides1,steps_completed,epochs,epochs_completed,metrics,model,loss_function,optimizer,learning_rate,script,start,end,completed,output,error_message,error_traceback,source_code,context,type,NA.
_tuning/2021-10-03T02-33-01Z,1.0288610458374,0.0321,0.9928,1.0289,0.8028,7,2,NA,10,10,_tuning/2021-10-03T02-33-01Z/tfruns.d/metrics.json,"Model
Model: ""sequential""
________________________________________________________________________________
Layer (type)                        Output Shape                    Param #     
================================================================================
embedding (Embedding)               (None, 30, 16)                  320016      
________________________________________________________________________________
conv1d (Conv1D)                     (None, 12, 32)                  3616        
________________________________________________________________________________
global_max_pooling1d (GlobalMaxPool (None, 32)                      0           
________________________________________________________________________________
dense_1 (Dense)                     (None, 64)                      2112        
________________________________________________________________________________
dense (Dense)                       (None, 1)                       65          
================================================================================
Total params: 325,809
Trainable params: 325,809
Non-trainable params: 0
________________________________________________________________________________

",binary_crossentropy,<tensorflow.python.keras.optimizer_v2.adam.Adam>,0.00100000004749745,cnn-spec.R,2021-10-03T02:33:03Z,2021-10-03T02:33:45Z,TRUE,"
[master*] > library(keras)

[master*] > # Hyperparameter flags --------------------------------------------------------
[master*] > 
[master*] > FLAGS <- flags(
+   flag_integer( .... [TRUNCATED] 

[master*] > # Define Model ----------------------------------------------------------------
[master*] > 
[master*] > model <- keras_model_sequential() .... [TRUNCATED] 

[master*] > model %>% compile(
+   optimizer = ""adam"",
+   loss = ""binary_crossentropy"",
+   metrics = c(""accuracy"")
+ )

[master*] > # Training & Evaluation ----------------------------------------------------
[master*] > 
[master*] > history <- model %>% fit(
+   x = ki .... [TRUNCATED] 

[master*] > plot(history)

[master*] > score <- model %>% evaluate(
+   kick_assess, state_assess
+ )

[master*] > cat(""Test accuracy:"", score[""accuracy""], ""\n"")
Test accuracy: 0.8028462 ",NA,NA,_tuning/2021-10-03T02-33-01Z/tfruns.d/source.tar.gz,local,training,0.802846193313599
_tuning/2021-10-03T02-32-20Z,1.00986909866333,0.0348,0.9925,1.0099,0.8096,5,2,NA,10,10,_tuning/2021-10-03T02-32-20Z/tfruns.d/metrics.json,"Model
Model: ""sequential""
________________________________________________________________________________
Layer (type)                        Output Shape                    Param #     
================================================================================
embedding (Embedding)               (None, 30, 16)                  320016      
________________________________________________________________________________
conv1d (Conv1D)                     (None, 13, 32)                  2592        
________________________________________________________________________________
global_max_pooling1d (GlobalMaxPool (None, 32)                      0           
________________________________________________________________________________
dense_1 (Dense)                     (None, 64)                      2112        
________________________________________________________________________________
dense (Dense)                       (None, 1)                       65          
================================================================================
Total params: 324,785
Trainable params: 324,785
Non-trainable params: 0
________________________________________________________________________________

",binary_crossentropy,<tensorflow.python.keras.optimizer_v2.adam.Adam>,0.00100000004749745,cnn-spec.R,2021-10-03T02:32:22Z,2021-10-03T02:33:01Z,TRUE,"
[master*] > library(keras)

[master*] > # Hyperparameter flags --------------------------------------------------------
[master*] > 
[master*] > FLAGS <- flags(
+   flag_integer( .... [TRUNCATED] 

[master*] > # Define Model ----------------------------------------------------------------
[master*] > 
[master*] > model <- keras_model_sequential() .... [TRUNCATED] 

[master*] > model %>% compile(
+   optimizer = ""adam"",
+   loss = ""binary_crossentropy"",
+   metrics = c(""accuracy"")
+ )

[master*] > # Training & Evaluation ----------------------------------------------------
[master*] > 
[master*] > history <- model %>% fit(
+   x = ki .... [TRUNCATED] 

[master*] > plot(history)

[master*] > score <- model %>% evaluate(
+   kick_assess, state_assess
+ )

[master*] > cat(""Test accuracy:"", score[""accuracy""], ""\n"")
Test accuracy: 0.8095757 ",NA,NA,_tuning/2021-10-03T02-32-20Z/tfruns.d/source.tar.gz,local,training,0.80957567691803
_tuning/2021-10-03T02-31-42Z,0.992249369621277,0.044,0.9891,0.9922,0.8044,3,2,NA,10,10,_tuning/2021-10-03T02-31-42Z/tfruns.d/metrics.json,"Model
Model: ""sequential""
________________________________________________________________________________
Layer (type)                        Output Shape                    Param #     
================================================================================
embedding (Embedding)               (None, 30, 16)                  320016      
________________________________________________________________________________
conv1d (Conv1D)                     (None, 14, 32)                  1568        
________________________________________________________________________________
global_max_pooling1d (GlobalMaxPool (None, 32)                      0           
________________________________________________________________________________
dense_1 (Dense)                     (None, 64)                      2112        
________________________________________________________________________________
dense (Dense)                       (None, 1)                       65          
================================================================================
Total params: 323,761
Trainable params: 323,761
Non-trainable params: 0
________________________________________________________________________________

",binary_crossentropy,<tensorflow.python.keras.optimizer_v2.adam.Adam>,0.00100000004749745,cnn-spec.R,2021-10-03T02:31:44Z,2021-10-03T02:32:20Z,TRUE,"
[master*] > library(keras)

[master*] > # Hyperparameter flags --------------------------------------------------------
[master*] > 
[master*] > FLAGS <- flags(
+   flag_integer( .... [TRUNCATED] 

[master*] > # Define Model ----------------------------------------------------------------
[master*] > 
[master*] > model <- keras_model_sequential() .... [TRUNCATED] 

[master*] > model %>% compile(
+   optimizer = ""adam"",
+   loss = ""binary_crossentropy"",
+   metrics = c(""accuracy"")
+ )

[master*] > # Training & Evaluation ----------------------------------------------------
[master*] > 
[master*] > history <- model %>% fit(
+   x = ki .... [TRUNCATED] 

[master*] > plot(history)

[master*] > score <- model %>% evaluate(
+   kick_assess, state_assess
+ )

[master*] > cat(""Test accuracy:"", score[""accuracy""], ""\n"")
Test accuracy: 0.8043504 ",NA,NA,_tuning/2021-10-03T02-31-42Z/tfruns.d/source.tar.gz,local,training,0.804350435733795
_tuning/2021-10-03T02-30-59Z,0.97170078754425,0.0286,0.9947,0.9717,0.8144,7,1,NA,10,10,_tuning/2021-10-03T02-30-59Z/tfruns.d/metrics.json,"Model
Model: ""sequential""
________________________________________________________________________________
Layer (type)                        Output Shape                    Param #     
================================================================================
embedding (Embedding)               (None, 30, 16)                  320016      
________________________________________________________________________________
conv1d (Conv1D)                     (None, 24, 32)                  3616        
________________________________________________________________________________
global_max_pooling1d (GlobalMaxPool (None, 32)                      0           
________________________________________________________________________________
dense_1 (Dense)                     (None, 64)                      2112        
________________________________________________________________________________
dense (Dense)                       (None, 1)                       65          
================================================================================
Total params: 325,809
Trainable params: 325,809
Non-trainable params: 0
________________________________________________________________________________

",binary_crossentropy,<tensorflow.python.keras.optimizer_v2.adam.Adam>,0.00100000004749745,cnn-spec.R,2021-10-03T02:31:00Z,2021-10-03T02:31:42Z,TRUE,"
[master*] > library(keras)

[master*] > # Hyperparameter flags --------------------------------------------------------
[master*] > 
[master*] > FLAGS <- flags(
+   flag_integer( .... [TRUNCATED] 

[master*] > # Define Model ----------------------------------------------------------------
[master*] > 
[master*] > model <- keras_model_sequential() .... [TRUNCATED] 

[master*] > model %>% compile(
+   optimizer = ""adam"",
+   loss = ""binary_crossentropy"",
+   metrics = c(""accuracy"")
+ )

[master*] > # Training & Evaluation ----------------------------------------------------
[master*] > 
[master*] > history <- model %>% fit(
+   x = ki .... [TRUNCATED] 

[master*] > plot(history)

[master*] > score <- model %>% evaluate(
+   kick_assess, state_assess
+ )

[master*] > cat(""Test accuracy:"", score[""accuracy""], ""\n"")
Test accuracy: 0.8143654 ",NA,NA,_tuning/2021-10-03T02-30-59Z/tfruns.d/source.tar.gz,local,training,0.814365446567535
_tuning/2021-10-03T02-30-16Z,0.924296796321869,0.037,0.9918,0.9243,0.8148,5,1,NA,10,10,_tuning/2021-10-03T02-30-16Z/tfruns.d/metrics.json,"Model
Model: ""sequential""
________________________________________________________________________________
Layer (type)                        Output Shape                    Param #     
================================================================================
embedding (Embedding)               (None, 30, 16)                  320016      
________________________________________________________________________________
conv1d (Conv1D)                     (None, 26, 32)                  2592        
________________________________________________________________________________
global_max_pooling1d (GlobalMaxPool (None, 32)                      0           
________________________________________________________________________________
dense_1 (Dense)                     (None, 64)                      2112        
________________________________________________________________________________
dense (Dense)                       (None, 1)                       65          
================================================================================
Total params: 324,785
Trainable params: 324,785
Non-trainable params: 0
________________________________________________________________________________

",binary_crossentropy,<tensorflow.python.keras.optimizer_v2.adam.Adam>,0.00100000004749745,cnn-spec.R,2021-10-03T02:30:18Z,2021-10-03T02:30:59Z,TRUE,"
[master*] > library(keras)

[master*] > # Hyperparameter flags --------------------------------------------------------
[master*] > 
[master*] > FLAGS <- flags(
+   flag_integer( .... [TRUNCATED] 

[master*] > # Define Model ----------------------------------------------------------------
[master*] > 
[master*] > model <- keras_model_sequential() .... [TRUNCATED] 

[master*] > model %>% compile(
+   optimizer = ""adam"",
+   loss = ""binary_crossentropy"",
+   metrics = c(""accuracy"")
+ )

[master*] > # Training & Evaluation ----------------------------------------------------
[master*] > 
[master*] > history <- model %>% fit(
+   x = ki .... [TRUNCATED] 

[master*] > plot(history)

[master*] > score <- model %>% evaluate(
+   kick_assess, state_assess
+ )

[master*] > cat(""Test accuracy:"", score[""accuracy""], ""\n"")
Test accuracy: 0.8147613 ",NA,NA,_tuning/2021-10-03T02-30-16Z/tfruns.d/source.tar.gz,local,training,0.814761281013489
_tuning/2021-10-03T02-29-35Z,0.966532289981842,0.0414,0.9904,0.9665,0.8102,3,1,NA,10,10,_tuning/2021-10-03T02-29-35Z/tfruns.d/metrics.json,"Model
Model: ""sequential_1""
________________________________________________________________________________
Layer (type)                        Output Shape                    Param #     
================================================================================
embedding (Embedding)               (None, 30, 16)                  320016      
________________________________________________________________________________
conv1d (Conv1D)                     (None, 28, 32)                  1568        
________________________________________________________________________________
global_max_pooling1d (GlobalMaxPool (None, 32)                      0           
________________________________________________________________________________
dense_1 (Dense)                     (None, 64)                      2112        
________________________________________________________________________________
dense (Dense)                       (None, 1)                       65          
================================================================================
Total params: 323,761
Trainable params: 323,761
Non-trainable params: 0
________________________________________________________________________________

",binary_crossentropy,<tensorflow.python.keras.optimizer_v2.adam.Adam>,0.00100000004749745,cnn-spec.R,2021-10-03T02:29:36Z,2021-10-03T02:30:16Z,TRUE,"
[master*] > library(keras)

[master*] > # Hyperparameter flags --------------------------------------------------------
[master*] > 
[master*] > FLAGS <- flags(
+   flag_integer( .... [TRUNCATED] 

[master*] > # Define Model ----------------------------------------------------------------
[master*] > 
[master*] > model <- keras_model_sequential() .... [TRUNCATED] 

[master*] > model %>% compile(
+   optimizer = ""adam"",
+   loss = ""binary_crossentropy"",
+   metrics = c(""accuracy"")
+ )

[master*] > # Training & Evaluation ----------------------------------------------------
[master*] > 
[master*] > history <- model %>% fit(
+   x = ki .... [TRUNCATED] 

[master*] > plot(history)

[master*] > score <- model %>% evaluate(
+   kick_assess, state_assess
+ )

[master*] > cat(""Test accuracy:"", score[""accuracy""], ""\n"")
Test accuracy: 0.810209 ",NA,NA,_tuning/2021-10-03T02-29-35Z/tfruns.d/source.tar.gz,local,training,0.810209035873413
_tuning/2021-10-03T02-27-56Z,NA,NA,NA,NA,NA,3,1,0,NA,NA,NA,NA,NA,NA,NA,cnn-spec.R,2021-10-03T02:27:58Z,2021-10-03T02:27:59Z,FALSE,"
[master*] > library(keras)

[master*] > # Hyperparameter flags --------------------------------------------------------
[master*] > 
[master*] > FLAGS <- flags(
+   flag_integer( .... [TRUNCATED] 

[master*] > # Define Model ----------------------------------------------------------------
[master*] > 
[master*] > model <- keras_model_sequential() .... [TRUNCATED] 

[master*] > model %>% compile(
+   optimizer = ""adam"",
+   loss = ""binary_crossentropy"",
+   metrics = c(""accuracy"")
+ )

[master*] > # Training & Evaluation ----------------------------------------------------
[master*] > 
[master*] > history <- model %>% fit(
+   x = ki .... [TRUNCATED] ",object 'kick_analysis' not found,"is_tensorflow_dataset(x)
fit.keras.engine.training.Model(., x = kick_analysis, y = state_analysis, 
    batch_size = 512, epochs = 10, validation_data = list(kick_assess, 
        state_assess))
fit(., x = kick_analysis, y = state_analysis, batch_size = 512, 
    epochs = 10, validation_data = list(kick_assess, state_assess))
model %>% fit(x = kick_analysis, y = state_analysis, batch_size = 512, 
    epochs = 10, validation_data = list(kick_assess, state_assess))
eval(ei, envir)
eval(ei, envir)
withVisible(eval(ei, envir))
tuning_run(file = ""cnn-spec.R"", runs_dir = ""_tuning"", flags = hyperparams)",_tuning/2021-10-03T02-27-56Z/tfruns.d/source.tar.gz,local,training,NA
_tuning/2021-10-03T02-27-35Z,NA,NA,NA,NA,NA,3,1,0,NA,NA,NA,NA,NA,NA,NA,cnn-spec.R,2021-10-03T02:27:37Z,2021-10-03T02:27:39Z,FALSE,"
[master*] > library(keras)

[master*] > # Hyperparameter flags --------------------------------------------------------
[master*] > 
[master*] > FLAGS <- flags(
+   flag_integer( .... [TRUNCATED] 

[master*] > # Define Model ----------------------------------------------------------------
[master*] > 
[master*] > model <- keras_model_sequential() .... [TRUNCATED] ",object 'max_length' not found,"create_layer(keras$layers$Embedding, object, list(input_dim = as.integer(input_dim), 
    output_dim = as.integer(output_dim), embeddings_initializer = embeddings_initializer, 
    embeddings_regularizer = embeddings_regularizer, activity_regularizer = activity_regularizer, 
    embeddings_constraint = embeddings_constraint, mask_zero = mask_zero, 
    input_length = if (!is.null(input_length)) as.integer(input_length) else NULL, 
    batch_size = as_nullable_integer(batch_size), name = name, 
    trainable = trainable, weights = weights))
layer_embedding(., input_dim = max_words + 1, output_dim = 16, 
    input_length = max_length)
create_layer(keras$layers$Conv1D, object, args)
layer_conv_1d(., filter = 32, kernel_size = FLAGS$kernel_size1, 
    strides = FLAGS$strides1, activation = ""relu"")
create_layer(keras$layers$GlobalMaxPooling1D, object, args)
layer_global_max_pooling_1d(.)
create_layer(keras$layers$Dense, object, list(units = as.integer(units), 
    activation = activation, use_bias = use_bias, kernel_initializer = kernel_initializer, 
    bias_initializer = bias_initializer, kernel_regularizer = kernel_regularizer, 
    bias_regularizer = bias_regularizer, activity_regularizer = activity_regularizer, 
    kernel_constraint = kernel_constraint, bias_constraint = bias_constraint, 
    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), 
    batch_size = as_nullable_integer(batch_size), dtype = dtype, 
    name = name, trainable = trainable, weights = weights))
layer_dense(., units = 64, activation = ""relu"")
create_layer(keras$layers$Dense, object, list(units = as.integer(units), 
    activation = activation, use_bias = use_bias, kernel_initializer = kernel_initializer, 
    bias_initializer = bias_initializer, kernel_regularizer = kernel_regularizer, 
    bias_regularizer = bias_regularizer, activity_regularizer = activity_regularizer, 
    kernel_constraint = kernel_constraint, bias_constraint = bias_constraint, 
    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), 
    batch_size = as_nullable_integer(batch_size), dtype = dtype, 
    name = name, trainable = trainable, weights = weights))
layer_dense(., units = 1, activation = ""sigmoid"")
keras_model_sequential() %>% layer_embedding(input_dim = max_words + 
    1, output_dim = 16, input_length = max_length) %>% layer_conv_1d(filter = 32, 
    kernel_size = FLAGS$kernel_size1, strides = FLAGS$strides1, 
    activation = ""relu"") %>% layer_global_max_pooling_1d() %>% 
    layer_dense(units = 64, activation = ""relu"") %>% layer_dense(units = 1, 
    activation = ""sigmoid"")
eval(ei, envir)
eval(ei, envir)
withVisible(eval(ei, envir))
tuning_run(file = ""cnn-spec.R"", runs_dir = ""_tuning"", flags = hyperparams)",_tuning/2021-10-03T02-27-35Z/tfruns.d/source.tar.gz,local,training,NA
_tuning/2021-10-03T02-26-06Z,NA,NA,NA,NA,NA,3,1,0,NA,NA,NA,NA,NA,NA,NA,cnn-spec.R,2021-10-03T02:26:08Z,2021-10-03T02:26:10Z,FALSE,"
[master*] > library(keras)

[master*] > # Hyperparameter flags --------------------------------------------------------
[master*] > 
[master*] > FLAGS <- flags(
+   flag_integer( .... [TRUNCATED] 

[master*] > # Define Model ----------------------------------------------------------------
[master*] > 
[master*] > model <- keras_model_sequential() .... [TRUNCATED] ",object 'max_words' not found,"create_layer(keras$layers$Embedding, object, list(input_dim = as.integer(input_dim), 
    output_dim = as.integer(output_dim), embeddings_initializer = embeddings_initializer, 
    embeddings_regularizer = embeddings_regularizer, activity_regularizer = activity_regularizer, 
    embeddings_constraint = embeddings_constraint, mask_zero = mask_zero, 
    input_length = if (!is.null(input_length)) as.integer(input_length) else NULL, 
    batch_size = as_nullable_integer(batch_size), name = name, 
    trainable = trainable, weights = weights))
layer_embedding(., input_dim = max_words + 1, output_dim = 16, 
    input_length = max_length)
create_layer(keras$layers$Conv1D, object, args)
layer_conv_1d(., filter = 32, kernel_size = FLAGS$kernel_size1, 
    strides = FLAGS$strides1, activation = ""relu"")
create_layer(keras$layers$GlobalMaxPooling1D, object, args)
layer_global_max_pooling_1d(.)
create_layer(keras$layers$Dense, object, list(units = as.integer(units), 
    activation = activation, use_bias = use_bias, kernel_initializer = kernel_initializer, 
    bias_initializer = bias_initializer, kernel_regularizer = kernel_regularizer, 
    bias_regularizer = bias_regularizer, activity_regularizer = activity_regularizer, 
    kernel_constraint = kernel_constraint, bias_constraint = bias_constraint, 
    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), 
    batch_size = as_nullable_integer(batch_size), dtype = dtype, 
    name = name, trainable = trainable, weights = weights))
layer_dense(., units = 64, activation = ""relu"")
create_layer(keras$layers$Dense, object, list(units = as.integer(units), 
    activation = activation, use_bias = use_bias, kernel_initializer = kernel_initializer, 
    bias_initializer = bias_initializer, kernel_regularizer = kernel_regularizer, 
    bias_regularizer = bias_regularizer, activity_regularizer = activity_regularizer, 
    kernel_constraint = kernel_constraint, bias_constraint = bias_constraint, 
    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), 
    batch_size = as_nullable_integer(batch_size), dtype = dtype, 
    name = name, trainable = trainable, weights = weights))
layer_dense(., units = 1, activation = ""sigmoid"")
keras_model_sequential() %>% layer_embedding(input_dim = max_words + 
    1, output_dim = 16, input_length = max_length) %>% layer_conv_1d(filter = 32, 
    kernel_size = FLAGS$kernel_size1, strides = FLAGS$strides1, 
    activation = ""relu"") %>% layer_global_max_pooling_1d() %>% 
    layer_dense(units = 64, activation = ""relu"") %>% layer_dense(units = 1, 
    activation = ""sigmoid"")
eval(ei, envir)
eval(ei, envir)
withVisible(eval(ei, envir))
tuning_run(file = ""cnn-spec.R"", runs_dir = ""_tuning"", flags = hyperparams)",_tuning/2021-10-03T02-26-06Z/tfruns.d/source.tar.gz,local,training,NA
